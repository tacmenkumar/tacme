#!/usr/bin/env node

/**
 * Module dependencies.
 */
var http = require('http');
var https = require('https');
var fs = require('fs');

var app = require('../app');
var debug = require('debug')('tacme:server');
var db = require('../db.js');
var socketio = require('../socketio.js');

var env = 'production';
env = 'development';
var server;

var privateKey  = fs.readFileSync('./sslcert/nirworld-key.pem', 'utf8');
var certificate = fs.readFileSync('./sslcert/nirworld-cert.pem', 'utf8');



var credentials = {key: privateKey, cert: certificate};

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

//SSL termination occurs at Heroku's load balancers; they send your app plain (non-SSL) traffic, so your app should create a non-HTTPS server. As for the page at https://mydomain.com ran insecure content from http://mydomain.com, make sure that all the images/scripts/etc. your page is using is also served over the https protocol.
if(env === 'production'){
  server = http.createServer(app);
}else{
  server = https.createServer(credentials, app);
}

/**
 * Listen on provided port, on all network interfaces.
 */
db.sequelize.sync({
  force: true
}).then(function() {
  server.listen(port);
});

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
  socketio.initSocket(server);
}